{"title":"数据排序 第1课时","uid":"6e55f275df54ecca34efde364facb8dd","slug":"数据排序 第1课时","date":"2024-01-26T13:10:57.000Z","updated":"2024-01-26T13:41:43.499Z","comments":true,"path":"api/articles/数据排序 第1课时.json","keywords":null,"cover":null,"content":"<h5 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"[引入]\"></a>[引入]</h5><p>​\t信息获取后通常需要进行处理，处理后的信息其目的便于人们的应用。信息处理方法有多种，通常有数据的排序、查找、插入、删除、归并等操作。</p>\n<h5 id=\"STD库的排序方法\"><a href=\"#STD库的排序方法\" class=\"headerlink\" title=\"[STD库的排序方法]\"></a>[STD库的排序方法]</h5><p>​\tSTD库中存在一个排序函数，叫<code>sort</code>，这个函数在库<code>algorithm</code>(通过代码<code>#include&lt;algorithm&gt;</code>导入)</p>\n<p>​\tsort函数的使用方法</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">sort(头指针,尾指针);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​\t举例:将a数组的下表为1~n项排序</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">sort(a+1,a+n+1);&#x2F;&#x2F;下表从0开始<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"[选择排序]\"></a>[选择排序]</h5><h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&lt;基本思想&gt;\"></a>&lt;基本思想&gt;</h6><p>​\t每一趟从待排序的数据元素中选出最小(或最大)的一个元素，顺序放在待排序的数列的最前面，直到全部待排序的数据元素都排序完。</p>\n<h6 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"&lt;代码实现&gt;\"></a>&lt;代码实现&gt;</h6><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int a[20005];\nvoid psort(int l, int r) &#123;\t\t\t\t\t&#x2F;&#x2F;此函数的意义:排序a数组的l~r的位置的元素\n\tfor(int i &#x3D; l; i &lt; r; i++) &#123;\t\t\t&#x2F;&#x2F;j&#x3D;i+1，当i&#x3D;r时j(i+1)&gt;r所以,i的枚举是从l~(r-1)\n\t\tminn &#x3D; i;\n\t\tfor(int j &#x3D; i + 1; j &lt;&#x3D; r; j++) &#123;\n\t\t\tif(a[j] &lt; a[minn]) &#123;\t\t\t&#x2F;&#x2F;如过找到比a[minn]小的元素,就标记给minn,如果是逆序排序就将小于号改为大于号\n\t\t\t\tminn &#x3D; j;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif(minn !&#x3D; i) &#123;\t\t\t\t\t\t&#x2F;&#x2F;如果i~r中最小的数不是i本身,那么i这个位置的数就与最小的数进行替换\n            int k &#x3D; a[minn];\t\t\t\t&#x2F;&#x2F;进行替换\n            a[minn] &#x3D; a[i];\n            a[i] &#x3D; k;\n        &#125;\n\t&#125;\n    return;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"[冒泡排序]\"></a>[冒泡排序]</h5><h6 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"&lt;基本思想&gt;\"></a>&lt;基本思想&gt;</h6><p>​\t冒泡排序的基本思想 冒泡排序是交换排序中一种简单的排序方法。 它的基本思想是对所有相邻记录的关键字值进行比效，如果是逆顺（a[j]&gt;a[j+1]），则将其交换，使最大(或最小)的元素冒到最后的那个位置，最终达到有序化。</p>\n<h6 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"&lt;代码实现&gt;\"></a>&lt;代码实现&gt;</h6><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int a[20005];\nvoid msort(int l, int r) &#123;\n    for(int i &#x3D; r; i &gt; l; i--) &#123;\n        bool flag &#x3D; true;\t\t\t\t\t\t\t&#x2F;&#x2F;判断序列是否有序\n        for (int j &#x3D; l; j &lt; i; j++) &#123;\n            if(a[j] &gt; a[j + 1]) &#123;\t\t\t\t\t&#x2F;&#x2F;逆序排序将大于号改为小于号\n                int k &#x3D; a[i];\t\t\t\t\t\t&#x2F;&#x2F;交换\n                a[i] &#x3D; a[j];\n                a[j] &#x3D; k;\n                flag &#x3D; false;\t\t\t\t\t\t&#x2F;&#x2F;进行交换说明不是有序的\n            &#125;\n        &#125;\n        if(flag) &#123;\t\t\t\t\t\t\t\t\t&#x2F;&#x2F;如果使有序的就结束排序\n            break;\n        &#125;\n    &#125;\n    return;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"今日作业\"><a href=\"#今日作业\" class=\"headerlink\" title=\"[今日作业]\"></a>[今日作业]</h5><p>​\t完成下列题目的代码,禁止照抄上面代码(三种方法都使用一遍),写完请发给我。</p>\n<p>​\t谁考了第k名</p>\n<h6 id=\"【题目描述】\"><a href=\"#【题目描述】\" class=\"headerlink\" title=\"【题目描述】\"></a>【题目描述】</h6><p>在一次考试中，每个学生的成绩都不相同，现知道了每个学生的学号和成绩，求考第k名学生的学号和成绩。</p>\n<h6 id=\"【输入】\"><a href=\"#【输入】\" class=\"headerlink\" title=\"【输入】\"></a>【输入】</h6><p>第一行有两个整数，分别是学生的人数n（1≤n≤100），和求第k名学生的k（1≤k≤n）。</p>\n<p>其后有n行数据，每行包括一个学号（整数）和一个成绩（浮点数），中间用一个空格分隔。</p>\n<h6 id=\"【输出】\"><a href=\"#【输出】\" class=\"headerlink\" title=\"【输出】\"></a>【输出】</h6><p>输出第k名学生的学号和成绩，中间用空格分隔。（注：请用%g输出成绩）</p>\n<h6 id=\"【输入样例】\"><a href=\"#【输入样例】\" class=\"headerlink\" title=\"【输入样例】\"></a>【输入样例】</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">5 3 \n90788001 67.8 \n90788002 90.3 \n90788003 61 \n90788004 68.4 \n90788005 73.9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"【输出样例】\"><a href=\"#【输出样例】\" class=\"headerlink\" title=\"【输出样例】\"></a>【输出样例】</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">90788004 68.4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"[引入]​ 信息获取后通常需要进行处理，处理后的信息其目的便于人们的应用。信息处理方法有多种，通常有数据的排序、查找、插入、删除、归并等操作。 [STD库的排序...","permalink":"/post/数据排序 第1课时","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"基础算法","slug":"基础算法","count":2,"path":"api/tags/基础算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">[引入]</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#STD%E5%BA%93%E7%9A%84%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">[STD库的排序方法]</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">[选择排序]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\"><span class=\"toc-text\">&lt;基本思想&gt;</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\">&lt;代码实现&gt;</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">[冒泡排序]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\">&lt;基本思想&gt;</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#-3\"><span class=\"toc-text\">&lt;代码实现&gt;</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%8A%E6%97%A5%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">[今日作业]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E3%80%90%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%E3%80%91\"><span class=\"toc-text\">【题目描述】</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BE%93%E5%85%A5%E3%80%91\"><span class=\"toc-text\">【输入】</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BE%93%E5%87%BA%E3%80%91\"><span class=\"toc-text\">【输出】</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B%E3%80%91\"><span class=\"toc-text\">【输入样例】</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B%E3%80%91\"><span class=\"toc-text\">【输出样例】</span></a></li></ol></li></ol>","author":{"name":"serverDream","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/usericon/332771.png","link":"/","description":"一位正在为社会作贡献的读书人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"数据排序 第2课时","uid":"8b547a7ca74271c20d3e3845ab2b46f9","slug":"数据排序 第2课时","date":"2024-01-30T11:26:03.000Z","updated":"2024-01-31T14:15:08.639Z","comments":true,"path":"api/articles/数据排序 第2课时.json","keywords":null,"cover":null,"text":"1.桶排序本页面将简要介绍桶排序。 定义桶排序（英文：Bucket sort）是排序算法的一种，适用于待排序数据值域较大但分布比较均匀的情况。 过程桶排序按下列...","permalink":"/post/数据排序 第2课时","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"基础算法","slug":"基础算法","count":2,"path":"api/tags/基础算法.json"}],"author":{"name":"serverDream","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/usericon/332771.png","link":"/","description":"一位正在为社会作贡献的读书人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}